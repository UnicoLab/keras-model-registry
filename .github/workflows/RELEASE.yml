name: "Semantic Release"

on:
  workflow_dispatch:
    inputs:
      DRY_RUN:
        required: false
        default: false
        type: boolean
      SKIP_RELEASE:
        required: false
        default: false
        type: boolean
        description: 'Skip release if recovering from a failed publish'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  SEMANTIC_RELEASE:
    name: Semantic Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}
      new_release_notes: ${{ steps.semantic-release.outputs.new_release_notes }}
      release_created: ${{ steps.semantic-release.outputs.new_release_version != '' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for recovery
        id: recovery
        run: |
          if [ -f .github/recovery/last_release_version.txt ]; then
            echo "last_version=$(cat .github/recovery/last_release_version.txt)" >> $GITHUB_OUTPUT
            echo "recovery=true" >> $GITHUB_OUTPUT
          else
            echo "recovery=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true
      
      - name: Semantic Release
        id: semantic-release
        if: inputs.SKIP_RELEASE == false
        uses: "UnicoLab/keras-model-registry/.github/templates/github/semantic_release@main"
        with:
          PROJECT_NAME: KMR
          PROJECT_DIRECTORY: .
          BRANCHES: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: ${{ inputs.DRY_RUN }}
      
      - name: Testing TAG fetch
        if: steps.semantic-release.outcome == 'success' || steps.semantic-release.outcome == 'skipped'
        shell: bash
        run: |
          echo "CURRENT TAG:"
          echo "${{ steps.semantic-release.outputs.new_release_version }}"
          echo "CURRENT Notes:"
          echo "${{ steps.semantic-release.outputs.new_release_notes }}"
      
      - name: Save release version
        if: steps.semantic-release.outputs.new_release_version != ''
        run: |
          mkdir -p .github/recovery
          echo "${{ steps.semantic-release.outputs.new_release_version }}" > .github/recovery/last_release_version.txt
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add .github/recovery/last_release_version.txt
          git commit -m "chore: save release version ${{ steps.semantic-release.outputs.new_release_version }}" || exit 0
          git push || exit 0
        continue-on-error: true

  PYPI_PUBLISH:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: SEMANTIC_RELEASE
    if: needs.SEMANTIC_RELEASE.outputs.release_created == true || inputs.SKIP_RELEASE == true
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get release version
        id: version
        run: |
          if [ "${{ inputs.SKIP_RELEASE }}" == "true" ] && [ -f .github/recovery/last_release_version.txt ]; then
            VERSION=$(cat .github/recovery/last_release_version.txt)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Using recovery version: $VERSION"
          else
            VERSION="${{ needs.SEMANTIC_RELEASE.outputs.new_release_version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Using new release version: $VERSION"
          fi
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: 'pip'
      
      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --all-extras --no-interaction
      
      - name: Publishing to PyPI
        id: pypi-publish
        shell: bash
        run: |
          # Configuring PyPi
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          
          # Setting correct package version
          poetry version ${{ steps.version.outputs.version }}
          
          # Publishing to PyPi with retry logic
          MAX_RETRIES=3
          RETRY_DELAY=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if poetry publish --build; then
              echo "Published successfully"
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Publish failed, retrying in ${RETRY_DELAY}s (attempt $RETRY_COUNT/$MAX_RETRIES)..."
                sleep $RETRY_DELAY
              else
                echo "Publish failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
      
      - name: Cleanup recovery file on success
        if: success()
        run: |
          if [ -f .github/recovery/last_release_version.txt ]; then
            rm .github/recovery/last_release_version.txt
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
            git add .github/recovery/last_release_version.txt
            git commit -m "chore: remove recovery file after successful publish" || exit 0
            git push || exit 0
          fi
        continue-on-error: true

  UPDATE_DOCS:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [SEMANTIC_RELEASE, PYPI_PUBLISH]
    if: always() && (needs.SEMANTIC_RELEASE.outputs.release_created == true || inputs.SKIP_RELEASE == true) && needs.PYPI_PUBLISH.result == 'success'
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get release version
        id: version
        run: |
          if [ "${{ inputs.SKIP_RELEASE }}" == "true" ] && [ -f .github/recovery/last_release_version.txt ]; then
            VERSION=$(cat .github/recovery/last_release_version.txt)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            VERSION="${{ needs.SEMANTIC_RELEASE.outputs.new_release_version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          cache: 'pip'
      
      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --only doc --no-interaction
      
      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
      
      - name: Releasing new documentation with mike
        id: docs-deploy
        shell: bash
        run: |
          MAX_RETRIES=3
          RETRY_DELAY=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if mike deploy --push --update-aliases ${{ steps.version.outputs.version }} latest; then
              echo "Docs deployed successfully"
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Docs deployment failed, retrying in ${RETRY_DELAY}s (attempt $RETRY_COUNT/$MAX_RETRIES)..."
                sleep $RETRY_DELAY
              else
                echo "Docs deployment failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
        continue-on-error: true
