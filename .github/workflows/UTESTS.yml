name: "Unit Tests"

on:
  push:
    branches:
      - dev
      - main
    paths:
      - "**.py"
      - "tests/**"
      - "kmr/**"
  pull_request:
    branches:
      - dev
      - main
    types:
      - opened
      - edited
      - synchronize
    paths:
      - "**.py"
      - "tests/**"
      - "kmr/**"
  workflow_dispatch:
    inputs:
      PYTHON_VERSION:
        required: false
        default: "3.11"
        type: choice
        options:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
      TEST_GROUP:
        required: false
        default: "all"
        type: choice
        options:
          - "all"
          - "smoke"
          - "unit"
          - "integration"
          - "layers"
          - "models"
          - "utils"
          - "metrics"

concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

jobs:
  smoke-test:
    name: Smoke Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Cache Poetry dependencies
        id: cache-poetry
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-
      
      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-
      
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Install project
        run: poetry install --no-interaction
      
      - name: Run smoke tests
        run: |
          poetry run pytest tests/ \
            -v \
            --maxfail=1 \
            --ignore=tests/integration/ \
            --ignore=tests/test_universal_input_handling.py \
            --tb=short

  test:
    name: Tests (Python ${{ matrix.python-version }}, ${{ matrix.test-group }})
    runs-on: ubuntu-latest
    needs: smoke-test
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        test-group: ["unit", "integration", "layers", "models", "utils", "metrics"]
        exclude:
          - python-version: "3.9"
            test-group: "integration"
          - python-version: "3.10"
            test-group: "integration"
    
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Cache Poetry dependencies
        id: cache-poetry
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-
      
      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-
      
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Install project
        run: poetry install --no-interaction
      
      - name: Run linting
        if: matrix.test-group == 'unit' && matrix.python-version == '3.11'
        run: |
          poetry run ruff check kmr/ tests/ --select F,E,W,C4 --ignore ANN,D,UP,COM,SIM,PTH,S,B,N,ARG,ISC,E402,F401
          poetry run black --check kmr/ tests/
      
      - name: Run type checking
        if: matrix.test-group == 'unit' && matrix.python-version == '3.11'
        run: poetry run mypy kmr/ --ignore-missing-imports --no-strict-optional
      
      - name: Run tests
        run: |
          case "${{ matrix.test-group }}" in
            unit)
              poetry run pytest tests/ \
                -v \
                --cov=kmr \
                --cov-report=xml \
                --cov-report=html \
                --cov-report=term \
                --ignore=tests/integration/ \
                --ignore=tests/test_universal_input_handling.py \
                -k "not integration"
              ;;
            integration)
              poetry run pytest tests/integration/ \
                -v \
                --cov=kmr \
                --cov-append \
                --cov-report=xml \
                --cov-report=html \
                --cov-report=term \
                -m "not slow"
              ;;
            layers)
              poetry run pytest tests/layers/ \
                -v \
                --cov=kmr/layers \
                --cov-append \
                --cov-report=xml \
                --cov-report=html \
                --cov-report=term
              ;;
            models)
              poetry run pytest tests/models/ \
                -v \
                --cov=kmr/models \
                --cov-append \
                --cov-report=xml \
                --cov-report=html \
                --cov-report=term
              ;;
            utils)
              poetry run pytest tests/utils/ \
                -v \
                --cov=kmr/utils \
                --cov-append \
                --cov-report=xml \
                --cov-report=html \
                --cov-report=term
              ;;
            metrics)
              poetry run pytest tests/metrics/ \
                -v \
                --cov=kmr/metrics \
                --cov-append \
                --cov-report=xml \
                --cov-report=html \
                --cov-report=term
              ;;
            *)
              poetry run pytest tests/ \
                -v \
                --cov=kmr \
                --cov-report=xml \
                --cov-report=html \
                --cov-report=term
              ;;
          esac
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.test-group }}
          path: |
            pytest.xml
            htmlcov/
          retention-days: 7
        continue-on-error: true

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: always() && !cancelled()
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Cache Poetry dependencies
        id: cache-poetry
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-
      
      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-3.11-
      
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Install project
        run: poetry install --no-interaction
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
        continue-on-error: true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30
        continue-on-error: true

  benchmark:
    name: Benchmark Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      
      - name: Cache Poetry dependencies
        id: cache-poetry
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-3.11-
      
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Install project
        run: poetry install --no-interaction
      
      - name: Run benchmark tests
        run: |
          poetry run pytest tests/ \
            -v \
            --benchmark-only \
            --benchmark-json=benchmark.json \
            --ignore=tests/integration/ \
            || echo "No benchmark tests found or benchmarks disabled"
        continue-on-error: true
      
      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.json
          retention-days: 30
        continue-on-error: true
